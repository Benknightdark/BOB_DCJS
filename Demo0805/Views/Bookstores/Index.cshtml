@{
    Layout = "~/Views/_template.cshtml";

}

@model IEnumerable<Demo0805.Models.bookstore>
@using L10N
<style>
    .filterable {
        margin-top: 15px;
    }

        .filterable .panel-heading .pull-right {
            margin-top: -20px;
        }

        .filterable .filters input[disabled] {
            background-color: transparent;
            border: none;
            cursor: auto;
            box-shadow: none;
            padding: 0;
            height: auto;
        }

            .filterable .filters input[disabled]::-webkit-input-placeholder {
                color: #333;
            }

            .filterable .filters input[disabled]::-moz-placeholder {
                color: #333;
            }

            .filterable .filters input[disabled]:-ms-input-placeholder {
                color: #333;
            }
</style>
<div class="row">
    <div class="panel panel-primary filterable">
        <div class="panel-heading">
            <h3 class="panel-title">Users</h3>
            <div class="pull-right">
                <button class="btn btn-default btn-xs btn-filter"><span class="glyphicon glyphicon-filter"></span> Filter</button>
            </div>

        </div>
        <div class="table">
            <table class="table table-bordered table-hover">
                <tr class="filters">

                    <th> @Html.DisplayNameFor(model => model.no) </th>
                    <th> @Html.DisplayNameFor(model => model.name) </th>
                    <th> @Html.DisplayNameFor(model => model.city) </th>
                    <th> @Html.DisplayNameFor(model => model.rank)  </th>
                    <th> @Resource.Edit </th>
                    <th>@Resource.Delete </th>
                    <th>@Resource.Detail</th>
                </tr>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>   @Html.DisplayFor(modelItem => item.no)   </td>
                        <td>   @Html.DisplayFor(modelItem => item.name) </td>
                        <td>  @Html.DisplayFor(modelItem => item.city) </td>
                        <td>   @Html.DisplayFor(modelItem => item.rank) </td>
                        <td>  @Html.ActionLink(Resource.Edit, "Edit", new { no = item.no }, new { @class = "btn btn-primary glyphicon glyphicon-th-list" })</td>
                        <td>  @Html.ActionLink(Resource.Delete, "Delete", new { no = item.no }, new { @class = "btn btn-danger glyphicon glyphicon-remove-sign" })</td>
                        <td>  @Html.ActionLink(Resource.Detail, "Detail", new { no = item.no }, new { @class = "btn btn-success glyphicon glyphicon-th-list" })</td>
                    </tr>
                }
            </table>
        </div>

    </div>

</div>

<div class="form-group">

    <a href="/Bookstores/Create" class="btn btn-primary btn-lg active glyphicon glyphicon-plus-sign" role="button">@Resource.Create</a>

    <a href="/Bookstores/BookDetail" class="btn btn-primary btn-lg active glyphicon glyphicon-plus-sign" role="button">@Resource.ALLBookType</a>
    <div id="donut-name-chart"><h3><span class="label label-success">書局名稱</span></h3></div>
    <div id="donut-city-chart"><h3><span class="label label-success">書局地點</span></h3></div>
    <div id="bar-chart"><h3><span class="label label-success">書局排名</span></h3></div>
    <div id="bar-chart2"><h3><span class="label label-success">table</span></h3></div>
    <bar></bar>
</div>

<script>
    /*
Please consider that the JS part isn't production ready at all, I just code it to show the concept of merging filters and titles together !
*/
    $(document).ready(function () {
        $('.filterable .btn-filter').click(function () {
            var $panel = $(this).parents('.filterable'),
            $filters = $panel.find('.filters input'),
            $tbody = $panel.find('.table tbody');
            if ($filters.prop('disabled') == true) {
                $filters.prop('disabled', false);
                $filters.first().focus();
            } else {
                $filters.val('').prop('disabled', true);
                $tbody.find('.no-result').remove();
                $tbody.find('tr').show();
            }
        });

        $('.filterable .filters input').keyup(function (e) {
            /* Ignore tab key */
            var code = e.keyCode || e.which;
            if (code == '9') return;
            /* Useful DOM data and selectors */
            var $input = $(this),
            inputContent = $input.val().toLowerCase(),
            $panel = $input.parents('.filterable'),
            column = $panel.find('.filters th').index($input.parents('th')),
            $table = $panel.find('.table'),
            $rows = $table.find('tbody tr');
            /* Dirtiest filter function ever ;) */
            var $filteredRows = $rows.filter(function () {
                var value = $(this).find('td').eq(column).text().toLowerCase();
                return value.indexOf(inputContent) === -1;
            });
            /* Clean previous no-result if exist */
            $table.find('tbody .no-result').remove();
            /* Show all rows, hide filtered ones (never do that outside of a demo ! xD) */
            $rows.show();
            $filteredRows.hide();
            /* Prepend no-result row if all rows are filtered */
            if ($filteredRows.length === $rows.length) {
                $table.find('tbody').prepend($('<tr class="no-result text-center"><td colspan="' + $table.find('.filters th').length + '">No result found</td></tr>'));
            }
        });
    });
</script>

<script>
    var submit = function () {
        $.ajax({
            url: "/d3js/Bookstores",
            type: 'POST',
            contentType: "application/json; charset=utf-8",
            datatype: 'json',
            error: function (xhr) {
                console.log('Error: ' + xhr.statusText);
            },
            success: function (dataset) {
                LoadDataDC(dataset);
                LoadData(dataset);//呼叫LoadData方法
            }
        });
    };
    onload = submit;

    function LoadDataDC(dataset) {
        var data = crossfilter(dataset);
        var name = data.dimension(function (d) { return d.name; });
        var namegroup = name.group().reduceCount();
        var city = data.dimension(function (d) { return d.city; });
        var citygroup = city.group().reduceCount();
        var rank = data.dimension(function (d) { return d.rank; });
        var rankgroup = rank.group();

        dc.pieChart("#donut-city-chart")
               .width(250)
               .height(250)
               .radius(125)
               .innerRadius(50)
               .dimension(city)
               .group(citygroup);

        dc.pieChart("#donut-name-chart")
                .width(250)
                .height(250)
                .radius(125)
                .innerRadius(50)
                .dimension(name)
                .group(namegroup);

        dc.barChart("#bar-chart")
                .width(500)
                .height(250)
                .dimension(rank)
                .group(rankgroup)
                .x(d3.scale.linear().domain([5, 50]))
            .xAxisLabel("This is the X Axis!")
                .y(d3.scale.linear().domain([0, 10]))
             .yAxisLabel("This is the Y Axis!")
                .centerBar(true)
        ;

        //var datatable = dc.dataTable("#dc-data-table");
        //datatable
        //    .dimension(name)
        //    .group(function (d) { return  new [d.no,d.name,dicty,d.rank]})
        //     dynamic columns creation using an array of closures
        //    .columns([
        //        function (d) { return d.no},
        //        function (d) { return d.name},
        //        function (d) { return d.city; },
        //        function (d) { return d.rank }

        //    ]);
        dc.renderAll();
    };
    function LoadData(dataset) {
        /*加入svg tag*/
        var w = 500;
        var h = 200;
        var barpadding = 10;
        var svg = d3.select("bar").append("svg").attr("width", w).attr("height", h);

        /*加入長條圖*/
        svg.selectAll("rect")
        .data(dataset)
        .enter()
        .append("rect")
        .attr("x", function (d, i) {
            return i * (w / dataset.length);
        })
               .attr("y", function (d) {
                   return h - (d["rank"]);
               })
               .attr("width", w / dataset.length - barpadding)
               .attr("height", function (d) {
                   return d["rank"];
               })
               .attr("fill", function (d) {
                   return "rgb(0, 0, " + (d["rank"] * 10) + ")";
               });

        /*加入文字*/
        svg.selectAll("text")
               .data(dataset)
               .enter()
               .append("text")
               .text(function (d) {
                   return d["name"] + ": " + d["rank"];
               })
               .attr("text-anchor", "middle")
               .attr("x", function (d, i) {
                   return i * (w / dataset.length) + (w / dataset.length - barpadding) / 2;
               })
               .attr("y", function (d) {
                   return h - (d["rank"]);
               })
               .attr("font-family", "sans-serif")
               .attr("font-size", "11px")
               .attr("fill", "red");
    };
</script>