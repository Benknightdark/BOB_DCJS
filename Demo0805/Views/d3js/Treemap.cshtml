@{
    ViewBag.Title = "Treemap";
    Layout = "~/Views/_template.cshtml";
}
@model IEnumerable<Demo0805.Models.order>

<style>
    body {
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        margin: auto;
        position: relative;
        width: 960px;
    }

    form {
        position: absolute;
        right: 10px;
        top: 100px;
    }

    .node {
        border: solid 2px white;
        position: absolute;
    }

    #tooltip {
        position: absolute;
        width: 220px;
        height: auto;
        padding: 10px;
        background-color: white;
        -webkit-border-radius: 10px;
        -moz-border-radius: 10px;
        border-radius: 10px;
        -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
        pointer-events: none;
        z-index:3;
    }

        #tooltip.hidden {
            display: none;
        }

        #tooltip p {
            margin: 0;
            font-family: sans-serif;
            font-size: 16px;
            line-height: 20px;
        }
</style>
<body>
    <form>
        <label><input type="radio" name="mode" value="size" checked> Size</label>
        <label><input type="radio" name="mode" value="count"> Count</label>
    </form>


    <script>

        var margin = { top: 40, right: 10, bottom: 10, left: 10 },
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

        var color = d3.scale.category20();

        var treemap = d3.layout.treemap()
            .size([width, height])
            .sticky(true)
            .value(function (d) { return d.size; });

        var div = d3.select("body").append("div")
            .style("position", "relative")
            .style("width", (width + margin.left + margin.right) + "px")
            .style("height", (height + margin.top + margin.bottom) + "px")
            .style("left", margin.left + "px")
            .style("top", margin.top + "px");
        d3.json("/d3js/TreeMapData", function (error, root) {
            if (error) { console.log(error) };
          // console.log(root[0]);

            var node = div.datum(root[0]).selectAll(".node")
                .data(treemap.nodes)
              .enter().append("div")

                .attr("class", "node")
                .call(position)
                
                .text(function (d) {
               //    console.log(d);
                    return (d.children ? null : "書名：" + d.name + " 數量：" + d.size);
                })
        
                .style({
                    "background": function (d) { return d.children ? color(d.name) : null; }
                })
               .on("mousemove", function (d) {
                   var xPosition = d3.event.pageX + 5;
                   var yPosition = d3.event.pageY + 5;

                   d3.select("#tooltip")
                     .style("left", d.x+"px")
                     .style("top", d.y+100 + "px");
                   d3.select("#tooltip #value")
                     .text(d.parent.name);

                   console.log(d);
                   //console.log(d.parent.name + d.x + " " + d.y);
                   d3.select("#tooltip").classed("hidden", false);
               })
            .on("mouseout", function () { d3.select("#tooltip").classed("hidden", true); });

            
             
              
         

            d3.selectAll("input").on("change", function change() {
                var value = this.value === "count"
                    ? function () { return 1; }
                    : function (d) { return d.size; };

                node
                    .data(treemap.value(value).nodes)
                  .transition()
                    .duration(1500)
                    .call(position);
            });
        });

        function position() {
            this.style("left", function (d) { return d.x + "px"; })
                .style("top", function (d) { return d.y + "px"; })
                .style("width", function (d) { return Math.max(0, d.dx - 1) + "px"; })
                .style("height", function (d) { return Math.max(0, d.dy - 1) + "px"; });
        }
        
    
      

    </script>

    <div id="tooltip" class="hidden">
        <p><strong id="value"></strong></p>
    </div>

</body>

